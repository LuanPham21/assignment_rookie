{"ast":null,"code":"var _jsxFileName = \"D:\\\\NashTech\\\\assignment_rookie\\\\Rookie_ecommerce\\\\rookie.admin\\\\src\\\\components\\\\Brand\\\\BrandForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { Link, useHistory } from 'react-router-dom';\nimport { NotificationManager } from 'react-notifications';\nimport TextField from '../../shared-components/FormInputs/TextField';\nimport SelectField from '../../shared-components/FormInputs/SelectField';\nimport { BRAND } from '../../Constants/pages';\nimport { NormalBrandType } from \"../../Constants/Brand/BrandConstants\";\nimport { BrandTypeOptions } from \"../../Constants/selectOptions\";\nimport FileUpload from '../../shared-components/FormInputs/FileUpload';\nimport { createBrandRequest, UpdateBrandRequest } from \"./services/request\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialFormValues = {\n  name: '',\n  type: NormalBrandType,\n  imageFile: undefined\n};\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required('Required'),\n  type: Yup.string().required('Required')\n});\n\nconst BrandFormContainer = _ref => {\n  _s();\n\n  let {\n    initialBrandForm = { ...initialFormValues\n    }\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const isUpdate = initialBrandForm.id ? true : false;\n  const history = useHistory();\n\n  const handleResult = (result, message) => {\n    if (result) {\n      NotificationManager.success(`${isUpdate ? 'Updated' : 'Created'} Successful Brand ${message}`, `${isUpdate ? 'Update' : 'Create'} Successful`, 2000);\n      setTimeout(() => {\n        history.push(BRAND);\n      }, 1000);\n    } else {\n      NotificationManager.error(message, 'Create failed', 2000);\n    }\n  };\n\n  const updateBrandAsync = async form => {\n    console.log('update brand async');\n    let data = await UpdateBrandRequest(form.formValues);\n\n    if (data) {\n      handleResult(true, data.name);\n    }\n  };\n\n  const createBrandAsync = async form => {\n    console.log('create brand async');\n    let data = await createBrandRequest(form.formValues);\n\n    if (data) {\n      handleResult(true, data.name);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialBrandForm,\n    enableReinitialize: true,\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      setLoading(true);\n      setTimeout(() => {\n        if (isUpdate) {\n          updateBrandAsync({\n            formValues: values\n          });\n        } else {\n          createBrandAsync({\n            formValues: values\n          });\n        }\n\n        setLoading(false);\n      }, 1000);\n    },\n    children: actions => /*#__PURE__*/_jsxDEV(Form, {\n      className: \"intro-y col-lg-6 col-12\",\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        name: \"name\",\n        label: \"Name\",\n        placeholder: \"input brand name\",\n        isrequired: true,\n        disabled: isUpdate ? true : false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(SelectField, {\n        name: \"type\",\n        label: \"Type\",\n        options: BrandTypeOptions,\n        isrequired: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n        name: \"imageFile\",\n        label: \"Image\",\n        image: actions.values.imagePath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-auto\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger\",\n            type: \"submit\",\n            disabled: loading,\n            children: [\"Save \", loading && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/oval.svg\",\n              className: \"w-4 h-4 ml-2 inline-block\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 52\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: BRAND,\n            className: \"btn btn-outline-secondary ml-2\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BrandFormContainer, \"83Y/KdEJ2Ltz5bWm8lTH8uj+9n8=\", false, function () {\n  return [useHistory];\n});\n\n_c = BrandFormContainer;\nexport default BrandFormContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"BrandFormContainer\");","map":{"version":3,"sources":["D:/NashTech/assignment_rookie/Rookie_ecommerce/rookie.admin/src/components/Brand/BrandForm.js"],"names":["React","useEffect","useState","Formik","Form","Yup","Link","useHistory","NotificationManager","TextField","SelectField","BRAND","NormalBrandType","BrandTypeOptions","FileUpload","createBrandRequest","UpdateBrandRequest","initialFormValues","name","type","imageFile","undefined","validationSchema","object","shape","string","required","BrandFormContainer","initialBrandForm","loading","setLoading","isUpdate","id","history","handleResult","result","message","success","setTimeout","push","error","updateBrandAsync","form","console","log","data","formValues","createBrandAsync","values","actions","imagePath"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { NotificationManager } from 'react-notifications';\r\n\r\nimport TextField from '../../shared-components/FormInputs/TextField';\r\nimport SelectField from '../../shared-components/FormInputs/SelectField';\r\nimport { BRAND } from '../../Constants/pages';\r\nimport { NormalBrandType } from \"../../Constants/Brand/BrandConstants\";\r\nimport { BrandTypeOptions } from \"../../Constants/selectOptions\";\r\nimport FileUpload from '../../shared-components/FormInputs/FileUpload';\r\nimport { createBrandRequest, UpdateBrandRequest } from \"./services/request\";\r\n\r\nconst initialFormValues = {\r\n    name: '',\r\n    type: NormalBrandType,\r\n    imageFile: undefined\r\n};\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    name: Yup.string().required('Required'),\r\n    type: Yup.string().required('Required')\r\n});\r\n\r\nconst BrandFormContainer = ({ initialBrandForm = {\r\n    ...initialFormValues\r\n} }) => {\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const isUpdate = initialBrandForm.id ? true : false;\r\n\r\n    const history = useHistory();\r\n\r\n    const handleResult = (result, message) => {\r\n        if (result) {\r\n            NotificationManager.success(\r\n                `${isUpdate ? 'Updated' : 'Created'} Successful Brand ${message}`,\r\n                `${isUpdate ? 'Update' : 'Create'} Successful`,\r\n                2000,\r\n            );\r\n\r\n            setTimeout(() => {\r\n                history.push(BRAND);\r\n            }, 1000);\r\n\r\n        } else {\r\n            NotificationManager.error(message, 'Create failed', 2000);\r\n        }\r\n    }\r\n\r\n    const updateBrandAsync = async (form) => {\r\n        console.log('update brand async');\r\n        let data = await UpdateBrandRequest(form.formValues);\r\n        if (data)\r\n        {\r\n            handleResult(true, data.name);\r\n        }\r\n    }\r\n\r\n    const createBrandAsync = async (form) => {  \r\n        console.log('create brand async');\r\n        let data = await createBrandRequest(form.formValues);\r\n        if (data)\r\n        {\r\n            handleResult(true, data.name);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initialBrandForm}\r\n            enableReinitialize\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values) => {\r\n                setLoading(true);\r\n\r\n                setTimeout(() => {\r\n                    if (isUpdate) {\r\n                        updateBrandAsync({ formValues: values });\r\n                    }\r\n                    else {\r\n                        createBrandAsync({ formValues: values });\r\n                    }\r\n\r\n                    setLoading(false);\r\n                }, 1000);\r\n            }}\r\n        >\r\n            {(actions) => (\r\n                <Form className='intro-y col-lg-6 col-12'>\r\n                    <TextField \r\n                        name=\"name\" \r\n                        label=\"Name\" \r\n                        placeholder=\"input brand name\" \r\n                        isrequired \r\n                        disabled={isUpdate ? true : false} />\r\n                    <SelectField \r\n                        name=\"type\" \r\n                        label=\"Type\" \r\n                        options={BrandTypeOptions} \r\n                        isrequired />\r\n                    <FileUpload \r\n                        name=\"imageFile\" \r\n                        label=\"Image\" \r\n                        image={actions.values.imagePath} />\r\n                    \r\n                    <div className=\"d-flex\">\r\n                        <div className=\"ml-auto\">\r\n                            <button className=\"btn btn-danger\"\r\n                                type=\"submit\" disabled={loading}\r\n                            >\r\n                                Save {(loading) && <img src=\"/oval.svg\" className='w-4 h-4 ml-2 inline-block' />}\r\n                            </button>\r\n\r\n                            <Link to={BRAND} className=\"btn btn-outline-secondary ml-2\">\r\n                                Cancel\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default BrandFormContainer;\r\n"]},"metadata":{},"sourceType":"module"}